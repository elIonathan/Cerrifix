// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package tutorial

import (
	"context"
	"database/sql"
	"time"
)

const createRep = `-- name: CreateRep :exec
INSERT INTO reparaciones (
    apellido, telefono, equipo, cable, pata, soporte, control, estado, falla, fecha_ingreso, fecha_entrega, costo, observaciones
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateRepParams struct {
	Apellido      string
	Telefono      string
	Equipo        string
	Cable         int64
	Pata          int64
	Soporte       int64
	Control       int64
	Estado        string
	Falla         string
	FechaIngreso  time.Time
	FechaEntrega  sql.NullTime
	Costo         sql.NullInt64
	Observaciones sql.NullString
}

func (q *Queries) CreateRep(ctx context.Context, arg CreateRepParams) error {
	_, err := q.db.ExecContext(ctx, createRep,
		arg.Apellido,
		arg.Telefono,
		arg.Equipo,
		arg.Cable,
		arg.Pata,
		arg.Soporte,
		arg.Control,
		arg.Estado,
		arg.Falla,
		arg.FechaIngreso,
		arg.FechaEntrega,
		arg.Costo,
		arg.Observaciones,
	)
	return err
}

const getRepByApellido = `-- name: GetRepByApellido :one
SELECT 
    id, apellido, telefono, equipo, cable, pata, soporte, control, estado, falla, fecha_ingreso, fecha_entrega, costo, observaciones
FROM 
    reparaciones
WHERE 
    apellido = ?
`

func (q *Queries) GetRepByApellido(ctx context.Context, apellido string) (Reparacione, error) {
	row := q.db.QueryRowContext(ctx, getRepByApellido, apellido)
	var i Reparacione
	err := row.Scan(
		&i.ID,
		&i.Apellido,
		&i.Telefono,
		&i.Equipo,
		&i.Cable,
		&i.Pata,
		&i.Soporte,
		&i.Control,
		&i.Estado,
		&i.Falla,
		&i.FechaIngreso,
		&i.FechaEntrega,
		&i.Costo,
		&i.Observaciones,
	)
	return i, err
}

const getRepByID = `-- name: GetRepByID :one
SELECT 
    id, apellido, telefono, equipo, cable, pata, soporte, control, estado, falla, fecha_ingreso, fecha_entrega, costo, observaciones
FROM 
    reparaciones
WHERE 
    id = ?
`

func (q *Queries) GetRepByID(ctx context.Context, id int64) (Reparacione, error) {
	row := q.db.QueryRowContext(ctx, getRepByID, id)
	var i Reparacione
	err := row.Scan(
		&i.ID,
		&i.Apellido,
		&i.Telefono,
		&i.Equipo,
		&i.Cable,
		&i.Pata,
		&i.Soporte,
		&i.Control,
		&i.Estado,
		&i.Falla,
		&i.FechaIngreso,
		&i.FechaEntrega,
		&i.Costo,
		&i.Observaciones,
	)
	return i, err
}

const getRepByTel = `-- name: GetRepByTel :one
SELECT 
    id, apellido, telefono, equipo, cable, pata, soporte, control, estado, falla, fecha_ingreso, fecha_entrega, costo, observaciones
FROM 
    reparaciones
WHERE 
    telefono = ?
`

func (q *Queries) GetRepByTel(ctx context.Context, telefono string) (Reparacione, error) {
	row := q.db.QueryRowContext(ctx, getRepByTel, telefono)
	var i Reparacione
	err := row.Scan(
		&i.ID,
		&i.Apellido,
		&i.Telefono,
		&i.Equipo,
		&i.Cable,
		&i.Pata,
		&i.Soporte,
		&i.Control,
		&i.Estado,
		&i.Falla,
		&i.FechaIngreso,
		&i.FechaEntrega,
		&i.Costo,
		&i.Observaciones,
	)
	return i, err
}

const getRepByTelParcial = `-- name: GetRepByTelParcial :many
SELECT 
    id, apellido, telefono, equipo, cable, pata, soporte, control, estado, falla, fecha_ingreso, fecha_entrega, costo, observaciones
FROM 
    reparaciones
WHERE 
    telefono LIKE '%' || ?
`

func (q *Queries) GetRepByTelParcial(ctx context.Context, dollar_1 sql.NullString) ([]Reparacione, error) {
	rows, err := q.db.QueryContext(ctx, getRepByTelParcial, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reparacione
	for rows.Next() {
		var i Reparacione
		if err := rows.Scan(
			&i.ID,
			&i.Apellido,
			&i.Telefono,
			&i.Equipo,
			&i.Cable,
			&i.Pata,
			&i.Soporte,
			&i.Control,
			&i.Estado,
			&i.Falla,
			&i.FechaIngreso,
			&i.FechaEntrega,
			&i.Costo,
			&i.Observaciones,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepaByApellido = `-- name: ListRepaByApellido :many
SELECT 
    id, apellido, telefono, equipo, cable, pata, soporte, control, estado, falla, fecha_ingreso, fecha_entrega, costo, observaciones
FROM 
    reparaciones
WHERE 
    apellido = ?
`

func (q *Queries) ListRepaByApellido(ctx context.Context, apellido string) ([]Reparacione, error) {
	rows, err := q.db.QueryContext(ctx, listRepaByApellido, apellido)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reparacione
	for rows.Next() {
		var i Reparacione
		if err := rows.Scan(
			&i.ID,
			&i.Apellido,
			&i.Telefono,
			&i.Equipo,
			&i.Cable,
			&i.Pata,
			&i.Soporte,
			&i.Control,
			&i.Estado,
			&i.Falla,
			&i.FechaIngreso,
			&i.FechaEntrega,
			&i.Costo,
			&i.Observaciones,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepaByTel = `-- name: ListRepaByTel :many
SELECT 
    id, apellido, telefono, equipo, cable, pata, soporte, control, estado, falla, fecha_ingreso, fecha_entrega, costo, observaciones
FROM 
    reparaciones
WHERE 
    telefono = ?
`

func (q *Queries) ListRepaByTel(ctx context.Context, telefono string) ([]Reparacione, error) {
	rows, err := q.db.QueryContext(ctx, listRepaByTel, telefono)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reparacione
	for rows.Next() {
		var i Reparacione
		if err := rows.Scan(
			&i.ID,
			&i.Apellido,
			&i.Telefono,
			&i.Equipo,
			&i.Cable,
			&i.Pata,
			&i.Soporte,
			&i.Control,
			&i.Estado,
			&i.Falla,
			&i.FechaIngreso,
			&i.FechaEntrega,
			&i.Costo,
			&i.Observaciones,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
